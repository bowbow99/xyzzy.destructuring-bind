;;; -*- mode: lisp; package: test.destructuring-bind -*-
;;;
;;; tests/destructuring-bind.lt
;;;

;;; Code:

(require "lisp-unit")
(require "destructuring-bind")
(require "cmu_loop")

(defpackage :test.destructuring-bind
  (:use :lisp :lisp-unit))

(in-package :test.destructuring-bind)

(remove-all-tests :test.destructuring-bind)

(defun %bool (x)
  (not (null x)))


;;;;
;;;; * Utilities: %assert-keyword-list
(import 'destructuring-bind::%assert-keyword-list)

(defparameter *allowed-keywords* nil)
(defparameter *allow-other-keys* nil)

(defmacro assert-keyword-list (expected keyword-list &rest extras)
  (case expected
    ((t)
     `(assert-true
          (%assert-keyword-list ,keyword-list *allowed-keywords* *allow-other-keys*)
        ,@extras))
    ((error nil)
     `(assert-error 'invalid-keyword-list
          (%assert-keyword-list ,keyword-list *allowed-keywords* *allow-other-keys*)
        ,@extras))
    (t
     (error "assert-keyword-list: Invalid expectation: ~S" expected))))

(define-test %assert-keyword-list-OK
  (let ((*allowed-keywords* '(:foo :bar :baz))
        (*allow-other-keys* nil))
    (loop for x in '((:foo 1)
                     (:bar 1)
                     (:baz 1)
                     (:foo 1 :bar 2)
                     (:foo 1 :baz 3)
                     (:foo 1 :bar 2 :baz 3)
                     (:foo 1 :baz 3 :bar 2)
                     (:bar 2 :baz 3)
                     (:bar 2 :foo 1)
                     (:bar 2 :foo 1 :baz 3)
                     (:bar 2 :baz 3 :foo 1)
                     (:baz 3 :bar 2))
      do (assert-keyword-list t x))))

(define-test %assert-keyword-list-odd-length
  (let ((*allowed-keywords* '(:foo :bar :baz))
        (*allow-other-keys* nil))
    (loop for x in '((:foo) (1) (:foo 1 2) (:bar 2 :foo))
      do (assert-keyword-list nil x))))

(define-test %assert-keyword-list-not-a-list
  (let ((*allowed-keywords* '(:foo :bar :baz))
        (*allow-other-keys* nil))
    (loop for x in '("foo" #(a b c) #(a b) #\LFD 33)
      do (assert-keyword-list nil x))))

(define-test %assert-keyword-list-dotted-list
  (let ((*allowed-keywords* '(:foo :bar :baz))
        (*allow-other-keys* nil))
    (loop for x in '((:foo . 1)
                     (:foo 1 . :bar)
                     (:foo 1 :bar . 2)
                     (:foo 1 :bar 2 . 3))
      do (assert-keyword-list nil x))))

(define-test %assert-keyword-list-circular-list
  (let ((*allowed-keywords* '(:foo :bar :baz))
        (*allow-other-keys* nil))
    (loop for x in '(#1=(:foo . #1#)
                     #2=(:foo 1 . #1#))
      do (assert-keyword-list nil x))))

(define-test %assert-keyword-list-unknown-keyword
  (let ((*allowed-keywords* '(:foo :bar :baz))
        (examples '((:foo 1 :hoge "hoge")
                    (:foo 1 :bar 2 :hoge "hoge")
                    (:hoge "hoge")
                    (:hoge "hoge" :fuga "fuga"))))
    (let ((*allow-other-keys* nil))
      (loop for x in examples
        do (assert-keyword-list nil x)))
    (let ((*allow-other-keys* t))
      (loop for x in examples
        do (assert-keyword-list t x)))))

(define-test %assert-keyword-list-suppressing-unknown-key-checking
  (let ((*allowed-keywords* '(:foo :bar :baz)))
    (let ((*allow-other-keys* t))
      (loop for x in '((:foo 1 :a 1)
                       (:foo 1 :a 1 :allow-other-keys t)
                       (:foo 1 :a 1 :allow-other-keys nil)
                       (:foo 1 :a 1 :allow-other-keys t :allow-other-keys nil)
                       (:foo 1 :a 1 :allow-other-keys nil :allow-other-keys t))
        do (assert-keyword-list t x)))
    (let ((*allow-other-keys* nil))
      (loop for x in '((:foo 1 :a 1)
                       (:foo 1 :a 1 :allow-other-keys nil)
                       (:foo 1 :a 1 :allow-other-keys nil :allow-other-keys t))
        do (assert-keyword-list nil x))
      (loop for x in '((:foo 1 :a 1 :allow-other-keys t)
                       (:foo 1 :a 1 :allow-other-keys t :allow-other-keys nil))
        do (assert-keyword-list t x)))))

;;;;
;;;; * &required

(define-test &required
  (assert-equal '(1)
      (destructuring-bind (foo)
          '(1)
        (list foo)))
  (assert-equal '(1 2)
      (destructuring-bind (foo bar)
          '(1 2)
        (list foo bar)))
  (assert-equal '(1 2 3)
      (destructuring-bind (foo bar baz)
          '(1 2 3)
        (list foo bar baz))))

(define-test &required-destruct
  (assert-equal '(1)
      (destructuring-bind ((x))
          '((1))
        (list x)))
  (assert-equal '(1 2)
      (destructuring-bind ((x y))
          '((1 2))
        (list x y)))
  (assert-equal '(1 2 3)
      (destructuring-bind ((x y z))
          '((1 2 3))
        (list x y z)))
  (assert-equal '(1 2 3)
      (destructuring-bind (x (y z))
          '(1 (2 3))
        (list x y z)))
  (assert-equal '(1 2 3)
      (destructuring-bind ((x y) z)
          '((1 2) 3)
        (list x y z))))

(define-test &required-wrong-number-of-arguments
  (assert-error 'too-many-arguments
      (destructuring-bind (a b)
          '(1 2 3)
        (list a b)))
  (assert-error 'too-few-arguments
      (destructuring-bind (a b)
          '(1)
        (list a b))))

(define-test &required-destructuring-mismatch
  (assert-error 'type-error
      (destructuring-bind (a (b c))
          '(1 2)
        (list a b c)))
  (assert-error 'type-error
      (destructuring-bind ((a b) c)
          '(1 2)
        (list a b c))))

;;;;
;;;; * &optional

(define-test &optional
  (assert-equal '(1 2)
      (destructuring-bind (a &optional b)
          '(1 2)
        (list a b)))
  (assert-equal '(1 nil)
      (destructuring-bind (a &optional b)
          '(1)
        (list a b))))

(define-test &optional-w/default
  (assert-equal '(1 2)
      (destructuring-bind (a &optional (b :default))
          '(1 2)
        (list a b)))
  (assert-equal '(1 :default)
      (destructuring-bind (a &optional (b :default))
          '(1)
        (list a b))))

(define-test &optional-w/default+supplied-p
  (assert-equal '(1 2 t)
      (destructuring-bind (a &optional (b :default b-supplied-p))
          '(1 2)
        (list a b (%bool b-supplied-p))))
  (assert-equal '(1 :default nil)
      (destructuring-bind (a &optional (b :default b-supplied-p))
          '(1)
        (list a b (%bool b-supplied-p)))))

;;;  destructuring
(define-test &optional-destruct
  (assert-equal '(1 2 3)
      (destructuring-bind (a &optional ((b c)))
          '(1 (2 3))
        (list a b c))))

(define-test &optional-destruct-w/default
  (assert-equal '(1 2 3)
      (destructuring-bind (a &optional ((b c) '(:a :b)))
          '(1 (2 3))
        (list a b c)))
  (assert-equal '(1 :a :b)
      (destructuring-bind (a &optional ((b c) '(:a :b)))
          '(1)
        (list a b c))))

(define-test &optional-destruct-w/default+supplied-p
  (assert-equal '(1 2 3 t)
      (destructuring-bind (a &optional ((b c) '(x y) b-c-supplied-p))
          '(1 (2 3))
        (list a b c (%bool b-c-supplied-p))))
  (assert-equal '(1 x y nil)
      (destructuring-bind (a &optional ((b c) '(x y) b-c-supplied-p))
          '(1)
        (list a b c (%bool b-c-supplied-p)))))

(define-test &optional-destruct-mismatch
  (assert-error 'too-few-arguments
      (destructuring-bind (a &optional ((b c)))
          '(1 (2))
        (list a b c)))
  (assert-error 'too-many-arguments
      (destructuring-bind (a &optional ((b c)))
          '(1 (2 3 4))
        (list a b c))))

(define-test &optional-destructuring-mismatch-in-initform
  (assert-error 'too-few-arguments
      (destructuring-bind (&optional ((a b) '(1)))
          nil
        (list a b)))
  (assert-error 'too-many-arguments
      (destructuring-bind (&optional ((a b) '(1 2 3)))
          nil
        (list a b))))

(define-test &optional-initform-environment
  (assert-equal '(1 1)
      (destructuring-bind (a &optional (b a))
          '(1)
        (list a b)))
  (assert-equal '(1 2)
      (destructuring-bind (a &optional (b (1+ a)))
          '(1)
        (list a b)))
  (assert-true
      (destructuring-bind (a &optional (b a))
          (list (gensym))
        (eql a b))))

;;;;
;;;; * &rest

(define-test &rest
  (assert-equal '(1 nil)
      (destructuring-bind (a &rest b)
          '(1)
        (list a b)))
  (assert-equal '(1 (2))
      (destructuring-bind (a &rest b)
          '(1 2)
        (list a b)))
  (assert-equal '(1 (2 3))
      (destructuring-bind (a &rest b)
          '(1 2 3)
        (list a b))))

(define-test &rest-destruct
  (assert-equal '(1 2 3)
      (destructuring-bind (a &rest (b c))
          '(1 2 3)
        (list a b c)))
  (assert-equal '(1 2 3 4)
      (destructuring-bind (a &rest (b c d))
          '(1 2 3 4)
        (list a b c d))))

(define-test &rest-by-dotted-list
  (assert-equal '(1 nil)
      (destructuring-bind (a . b)
          '(1)
        (list a b)))
  (assert-equal '(1 (2))
      (destructuring-bind (a . b)
          '(1 2)
        (list a b)))
  (assert-equal '(1 (2 3))
      (destructuring-bind (a . b)
          '(1 2 3)
        (list a b))))

;;;;
;;;; * &key

(define-test &key
  (assert-equal '(1 2)
      (destructuring-bind (&key a b)
          '(:a 1 :b 2)
        (list a b)))
  (assert-equal '(2 1)
      (destructuring-bind (&key a b)
          '(:b 1 :a 2)
        (list a b)))
  (assert-equal '(2 1)
      (destructuring-bind (&key a b)
          '(:a 2 :b 1)
        (list a b)))
  (assert-equal '(1 2)
      (destructuring-bind (&key a b)
          '(:b 2 :a 1)
        (list a b))))

(define-test &key-w/default
  (assert-equal '(:default)
      (destructuring-bind (&key (a :default))
          '()
        (list a)))
  (assert-equal '(1)
      (destructuring-bind (&key (a :default))
          '(:a 1)
        (list a))))

(define-test &key-w/default+sp-var
  (assert-equal '(1 t)
      (destructuring-bind (&key (a :default b))
          '(:a 1)
        (list a (%bool b))))
  (assert-equal '(:default nil)
      (destructuring-bind (&key (a :default b))
          '()
        (list a (%bool b)))))

(define-test &key-w/key
  (assert-equal '(nil 1)
      (destructuring-bind (&key ((:a b)) ((:b a)))
          '(:a 1)
        (list a b)))
  (assert-equal '(2 1)
      (destructuring-bind (&key ((:a b)) ((:b a)))
          '(:a 1 :b 2)
        (list a b))))

(define-test &key-destruct-w/key
  (assert-equal '(1 2 3)
      (destructuring-bind (&key ((:foo (a b c))))
          '(:foo (1 2 3))
        (list a b c))))

(define-test &key-given-unknown-keyword
  (assert-error 'invalid-keyword-list
      (destructuring-bind (&key a b)
          '(:foo 3)
        (list a b)))
  (assert-error 'invalid-keyword-list
      (destructuring-bind (&key a b)
          '(:a 1 :b 2 :c 3)
        (list a b))))

(define-test &key-supress-keyword-check
  (assert-equal '(1 2)
      (destructuring-bind (&key a b)
          '(:a 1 :b 2 :c 3 :allow-other-keys t)
        (list a b)))
  (assert-equal '(1 nil)
      (destructuring-bind (&key a b)
          '(:a 1 :c 3 :allow-other-keys t)
        (list a b)))
  (assert-error 'invalid-keyword-list
      (destructuring-bind (&key a b)
          '(:a 1 :b 2 :c 3 :allow-other-keys nil)
        (list a b)))
  (assert-equal '(1 2)
      (destructuring-bind (&key a b)
          '(:a 1 :b 2 :c 3 :allow-other-keys t :allow-other-keys nil)
        (list a b)))
  (assert-error 'invalid-keyword-list
      (destructuring-bind (&key a b)
          '(:a 1 :b 2 :c 3 :allow-other-keys nil :allow-other-keys t)
        (list a b))))

;;;;
;;;; * &rest + &key

(define-test &rest+&key
  (assert-equal '((:a 1 :b 2) 1 2)
      (destructuring-bind (&rest all &key a b)
          '(:a 1 :b 2)
        (list all a b)))
  (assert-equal '((:b 2 :a 1) 1 2)
      (destructuring-bind (&rest all &key a b)
          '(:b 2 :a 1)
        (list all a b)))
  (assert-equal '((:a 1) 1 nil)
      (destructuring-bind (&rest all &key a b)
          '(:a 1)
        (list all a b)))
  (assert-equal '((:b 2) nil 2)
      (destructuring-bind (&rest all &key a b)
          '(:b 2)
        (list all a b))))


;;;;
;;;; * &allow-other-keys

(define-test &allow-other-keys
  (assert-equal '(nil nil)
      (destructuring-bind (&key a b &allow-other-keys)
          '(:foo 1)
        (list a b)))
  (assert-equal '(1 nil)
      (destructuring-bind (&key a b &allow-other-keys)
          '(:a 1 :foo 1)
        (list a b)))
  (assert-equal '(1 2)
      (destructuring-bind (&key a b &allow-other-keys)
          '(:a 1 :b 2 :foo 3)
        (list a b)))
  (assert-equal '(nil 2)
      (destructuring-bind (&key a b &allow-other-keys)
          '(:b 2 :foo 3)
        (list a b)))
  )


